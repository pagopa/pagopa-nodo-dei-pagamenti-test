pr: none
trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: env
    displayName: Environment to Run Test
    type: string
    values:
      - prf
  - name: scenarioToRun
    displayName: Scenarios to run
    type: string
    default: PMCS_CT
    values:
      - ALL
      - CT
      - PMCS_CT
  - name: rampaSel
    displayName: Rampa to Use
    type: string
    default: rampa_1_1_10
    values:
      - rampa_1_1_1
      - rampa_1_1_10
      - rampa_1_10_10
      - rampa_4_40_10
      - rampa_10_100_10
      - rampa_30_300_10
      - rampa_50_500_10
variables:
  artifactName: TestPT

stages:
  
  - stage: publish_artifact
    displayName: "Publish artifact env (${{ parameters.env }})"
    jobs:
      - job: 
        displayName: "publish artifact on env (${{ parameters.env }})"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
                      
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: $(Agent.BuildDirectory)/
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/pagopa-nodo-dei-pagamenti-test.zip
              replaceExistingArchive: true
            
          - publish: $(Build.ArtifactStagingDirectory)/pagopa-nodo-dei-pagamenti-test.zip
            displayName: "Publish Artifact"
            artifact: $(artifactName)
            
            
  - stage: k6_run_tests
    displayName: "K6 Run Tests"

    jobs:
      - job: k6_run_scripts
        displayName: "k6 run scripts"
        pool: pagopa-agent-pool-uat
        
        steps:
          - checkout: none    
                       
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: $(artifactName)
              source: current
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: $(Pipeline.Workspace)/pagopa-nodo-dei-pagamenti-test.zip
              destinationFolder: $(Pipeline.Workspace)
              cleanDestinationFolder: false
              overwriteExistingFiles: true
                                      
          - script: |
              
              executeScript()
              {
                active_scenario=$1
                active_test=$2
                test_step=${rampaSel}
     
                envTest="pagoPA_PERF_apim"
            
                echo -----------------------------------------
                echo *** Main K6 Perf Test Script ***
                echo -----------------------------------------
               
                echo configured active_scenario = $active_scenario
                echo configured active_test = $active_test
                echo configured test_step= $test_step
                echo configured envTest= $envTest
                
                echo ***** k6 run --out csv=src/perf-test/k6/scenarios/$active_scenario/test/output/$test.csv -e scenario=$scenario -e test=$active_test -e steps=$test_step -e env=$envTest src/perf-test/k6/scenarios/$active_scenario/test/$active_test.js****               
                k6 run --out csv=src/perf-test/k6/scenarios/$active_scenario/test/output/$test.csv -e scenario=$scenario -e test=$active_test -e steps=$test_step -e env=$envTest src/perf-test/k6/scenarios/$active_scenario/test/$active_test.js
              }
              echo env selected:
              echo ${{ parameters.env }}
              echo rampa selected:
              echo ${{ parameters.rampaSel }}
              rampaSel=${{ parameters.rampaSel }}
              echo scenario selected:
              echo ${{ parameters.scenarioToRun }}
              scenarioToRun=${{ parameters.scenarioToRun }}
              #create output directory if not exists (both scen)
              mkdir -p src/perf-test/k6/scenarios/CT/test/output
              mkdir -p src/perf-test/k6/scenarios/PMCS_CT/test/output
              
              scenArray=()
              if [[ "$scenarioToRun" == "ALL" ]]; then
                      echo ALL scenario to run
                      scenArray=("CT" "PMCS_CT")
              elif [[ "$scenarioToRun" == "CT" ]]; then
                      echo CT scenario to run
                      scenArray=("CT")
              elif [[ "$scenarioToRun" == "PCM_CT" ]]; then
                      echo PCM_CT scenario to run
                      scenArray=("CT")
              else
                       echo no scenario selected, DEFAULT is PCM_CT
                       scenArray=("PMCS_CT")
              fi
              
              blacklistCT=("VA" "TC01.03" "TC03.07")
              blacklistPMCS=("idpay_setup" "idpay_setup_SIT" "user_setup")
              
              #for each scenario
              for i in "${scenArray[@]}"; do
                      echo current scenario is $i
                      #for each script
                      for d in src/perf-test/k6/scenarios/$i/test/*.js; do
              
                              #removing prefix path: removing prefix ending with slash
                              active_test=${d#src/perf-test/k6/scenarios/$i/test/*}
              
                              #removing suffix js
                              active_test=${active_test%.js}
              
                              #choosing the right blacklist to use
                              if [[ "$i" == "CT" ]]; then
                                      if [[ " ${blacklistCT[*]} " =~ " ${active_test} " ]]; then
                                              #skip script if it is blacklisted for CT
                                              echo $active_test blacklisted
                                      else
                                              #call function to execute the script
                                              executeScript $i ${active_test}
                                      fi
                              elif [[ "$i" == "PMCS_CT" ]]; then
                                      if [[ " ${blacklistPMCS[*]} " =~ " ${active_test} " ]]; then
                                              #skip script if it is blacklisted for PCMCS
                                              echo $active_test blacklisted
                                      else
                                              #call function to execute the script
                                              executeScript $i ${active_test}
                                      fi
                              fi
              
                      done
              
              done
            displayName: 'Command Line Script -  Run $scenarioToRun K6 scripts'
          
          - script: |
             echo pwd:
             pwd
             echo list:
             ls -lrt
             echo changind dir to go in output...
             cd $(pwd)/src/perf-test/k6/scenarios/$(activeScenario)/test/output
             echo pwd after changing dir:
             pwd
             echo list:
             ls -lrt
             
             echo start cat
             cat *
             echo end cat
            displayName: 'show results'
            