pr: none
trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: env
    displayName: Environment to Run Test
    type: string
    values:
      - dev
      - sit

variables:
  archiveName: nodo-dei-pagamenti-NRT.zip
  destinationFolderExtractArtifact: nodo/extracted

stages:
  - stage: prepare_env
    displayName: "Prepare env (${{ parameters.env }} )"
    jobs:
      - job: 
        displayName: "Prepare env (${{ parameters.env }})"
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
          
          - task: ArchiveFiles@2
            displayName: 'Zip $(archiveName)'
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(archiveName)
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(archiveName)
            displayName: "Publish Artifact $(archiveName)"
            artifact: $(archiveName)


  - stage: run_test
    displayName: "Run integration test (${{ parameters.env }})"
    pool: $(deploy-pool-${{ parameters.env }})
    jobs:
      - job: 
        displayName: "Run integration test (${{ parameters.env }})"
        steps:
          - checkout: none 

          - script: |
              cd $(Pipeline.Workspace)/oracle-lib

              wget https://download.oracle.com/otn_software/linux/instantclient/215000/instantclient-basic-linux.x64-21.5.0.0.0dbru.zip
              
              unzip instantclient-basic-linux.x64-21.5.0.0.0dbru.zip

              rm -rf instantclient-basic-linux.x64-21.5.0.0.0dbru.zip*
              
              echo "##vso[task.prependpath]$(Pipeline.Workspace)/oracle-lib/instantclient_21_5"
              echo "##vso[task.setvariable variable=LD_LIBRARY_PATH;isOutput=false]$(Pipeline.Workspace)/oracle-lib/instantclient_21_5"
            displayName: 'Install Oracle Instant Client'
          
          - task: DownloadPipelineArtifact@2
            displayName: "Download Artifact $(archiveName)"
            inputs:
              artifact: $(archiveName)
              source: current
          
          - task: ExtractFiles@1
            displayName: 'Unzip $(archiveName)'
            inputs:
              archiveFilePatterns: $(Pipeline.Workspace)/$(archiveName)
              destinationFolder: $(Pipeline.Workspace)/$(destinationFolderExtractArtifact)
              cleanDestinationFolder: true
              overwriteExistingFiles: false

          - script: |
              export $PATH
              echo "##vso[task.prependpath]/usr/local/bin"
              export $PATH
          

              behave --junit-directory=$(Pipeline.Workspace)/$(destinationFolderExtractArtifact)/report --junit $(Pipeline.Workspace)/$(destinationFolderExtractArtifact)/src/integ-test/bdd-test/features/appIO/flows/Annullo_PagamentoIO/PRO_ANNULLO_01.feature
            displayName: 'Run'