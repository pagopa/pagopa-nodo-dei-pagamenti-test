Feature:  flow checks for closePayment-v1 request - token scaduto, no mod3CancelV2 e closePayment-v1 OK [FLUSSO_CP_09]
 
  Background:
    Given systems up 
    And EC new version
    
   # UPDATE NODO4_CFG.CONFIGURATION_KEYS s SET s.CONFIG_VALUE = 1000 WHERE s.CONFIG_KEY ='default_durata_token_IO'
   
   # CONFIG server refresh phase
    Scenario: Execute CONFIG server refresh
    When CONFIG server refresh is triggered  # https://api.dev.platform.pagopa.it/nodo-pagamenti-dev/api/v1/config/refresh/CONFIG
    Then verify the HTTP status code response is 200 
    
   # verifyPaymentNotice phase
    Scenario: Execute verifyPaymentNotice request
    Given initial XML verifyPaymentNotice soap-request
    
    """
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:nod="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
       <soapenv:Header/>
       <soapenv:Body>
          <nod:verifyPaymentNoticeReq>
             <idPSP>AGID_01</idPSP>
             <idBrokerPSP>97735020584</idBrokerPSP>
             <idChannel>97735020584_03</idChannel>
             <password>pwdpwdpwd</password>
             <qrCode>
                <fiscalCode>#creditor_institution_code#</fiscalCode>
                <noticeNumber>#notice_number#</noticeNumber>
             </qrCode>
          </nod:verifyPaymentNoticeReq>
       </soapenv:Body>
    </soapenv:Envelope>
    """
    
    When psp sends SOAP verifyPaymentNotice to nodo-dei-pagamenti
    Then check outcome is OK of verifyPaymentNotice response
    
   # activateIOPaymentReq phase
    Scenario: Execute activateIOPayment request
    Given initial XML activateIOPayment soap-request
	
    """
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:nod="http://pagopa-api.pagopa.gov.it/node/nodeForIO.xsd">
       <soapenv:Header/>
       <soapenv:Body>
          <nod:activateIOPaymentReq>
             <idPSP>AGID_01</idPSP>
             <idBrokerPSP>97735020584</idBrokerPSP>
             <idChannel>97735020584_03</idChannel>
             <password>pwdpwdpwd</password>
             <!--Optional:-->
             <idempotencyKey>#idempotency_key#</idempotencyKey>
             <qrCode>
                <fiscalCode>#creditor_institution_code#</fiscalCode>
                <noticeNumber>#notice_number#</noticeNumber>
             </qrCode>
             <!--Optional:-->
             <expirationTime>60000</expirationTime>
             <amount>10.00</amount>
             <!--Optional:-->
             <dueDate>2021-12-12</dueDate>
             <!--Optional:-->
             <paymentNote>responseFull</paymentNote>
             <!--Optional:-->
             <payer>
                <uniqueIdentifier>
                   <entityUniqueIdentifierType>G</entityUniqueIdentifierType>
                   <entityUniqueIdentifierValue>77777777777</entityUniqueIdentifierValue>
                </uniqueIdentifier>
                <fullName>IOname_#idempotency_key#</fullName>
                <!--Optional:-->
                <streetName>IOstreet</streetName>
                <!--Optional:-->
                <civicNumber>IOcivic</civicNumber>
                <!--Optional:-->
                <postalCode>IOcode</postalCode>
                <!--Optional:-->
                <city>IOcity</city>
                <!--Optional:-->
                <stateProvinceRegion>IOstate</stateProvinceRegion>
                <!--Optional:-->
                <country>IT</country>
                <!--Optional:-->
                <e-mail>IO.test.prova@gmail.com</e-mail>
             </payer>
          </nod:activateIOPaymentReq>
       </soapenv:Body>
    </soapenv:Envelope>
    """
        
    When psp sends SOAP activateIOPayment to nodo-dei-pagamenti
    Then check outcome is OK of activateIOPayment response
    
    # DB check_00
    # SELECT * FROM NODO_ONLINE.POSITION_ACTIVATE s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # check POSITION_ACTIVATE.PAYMENT_TOKEN == $activateIOPaymentResponse.paymentToken and
    #       POSITION_ACTIVATE.PSP_ID == $activateIOPaymentRequest.idPSP
          
    # nodoChiediInformazioniPagamento phase
    Scenario: Execute a nodoChiediInformazioniPagamento request
    Given initial json nodoChiediInformazioniPagamento
    """
        {"idPagamento": "$activateIOPaymentResponse.paymentToken"}
    """
    When PM sends nodoChiediInformazioniPagamento to nodo-dei-pagamenti
    Then check errorCode is 200
    
    # closePayment-v1 request phase  
    Scenario: Execute a closePayment-v1 request
    Given initial json closePayment-v1
    """
        {"paymentTokens": [
            "$activateIOPaymentResponse.paymentToken"
            ],
        "outcome": "OK",
        "identificativoPsp": "70000000001",
        "tipoVersamento": "BPAY",
        "identificativoIntermediario": "70000000001",
        "identificativoCanale": "70000000001_03",
        "pspTransactionId": "18460845",
        "totalAmount": 12.00,
        "fee": 2.00,
        "timestampOperation": "2033-04-23T18:25:43Z",
        "additionalPaymentInformations": {
              "transactionId": "16113941",
              "outcomePaymentGateway": "EFF",
              "authorizationCode": "resOK"
            }
        }  
    """ 

    When PM sends closePayment-v1 to nodo-dei-pagamenti
    Then check esito is OK 
    And check errorCode is 200
 
    # DB check_01
    # SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT_STATUS s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#' order by s.ID asc;
    # SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT_STATUS_SNAPSHOT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_STATUS s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_STATUS_SNAPSHOT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_SERVICE s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.PM_SESSION_DATA s where s.ID_SESSIONE = '$activateIOPaymentResponse.paymentToken';
    # SELECT s.* FROM NODO_ONLINE.POSITION_SUBJECT s where s.FULL_NAME = 'IOname_#idempotency_key#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_ACTIVATE s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
        
    # check
    
    #POSITION_PAYMENT_STATUS
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS == 'PAYING'
    # INSERTED_TIMESTAMP != null
    # CREDITOR_REFERENCE_ID == iuv
    # PAYMENT_TOKEN == $activateIOPaymentResponse.paymentToken

    # STATUS1 == 'PAYMENT_RESERVED'
    # STATUS2 == 'PAYMENT_SENT'
    # STATUS3 == 'PAYMENT_ACCEPTED'
    # STATUS4 == null
    
    #POSITION_PAYMENT_STATUS_SNAPSHOT
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # CREDITOR_REFERENCE_ID == iuv
    # PAYMENT_TOKEN == $activateIOPaymentResponse.paymentToken
    # STATUS == 'PAYMENT_ACCEPTED'
    # INSERTED_TIMESTAMP != null
    # UPDATED_TIMESTAMP != null
    # FK_POSITION_PAYMENT == POSITION_PAYMENT.id

    # ID1 == null
    
    #POSITION_STATUS
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS2 == 'PAYING'
    # INSERTED_TIMESTAMP != null

    # ID1 == null
    
    #POSITION_STATUS_SNAPSHOT
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS == 'PAYING'
    # INSERTED_TIMESTAMP != null
    # UPDATED_TIMESTAPM != null
    # FK_POSITION_SERVICE == POSITION_SERVICE.id

    # id1 == null
    
    #POSITION_PAYMENT
    # ID5 != null
    # PA_FISCAL_CODE5 == '#creditor_institution_code#'
    # NOTICE_ID5 == '#notice_number#'
    # CREDITOR_REFERENCE_ID5 == iuv
    # PAYMENT_TOKEN5 == $activateIOPaymentResponse.paymentToken
    # BROKER_PA_ID5 == '#creditor_institution_code#'
    # STATION_ID5 == '#stazione#'
    # STATION_VERSION5 == 2
    # PSP_ID5 == '#psp#'
    # BROKER_PSP_ID5 == '#intermediairoPsp#'
    # CHANNEL_ID5 == '#canale#'
    # IDEMPOTENCY_KEY5 == '#idempotency_key#'
    # AMOUNT5 == 10
    # FEE5 == null
    # OUTCOME5 == null
    # PAYMENT_METHOD5 == 'TPAY'
    # PAYMENT_CHANNEL5 == 'WISP'
    # TRANSFER_DATE5 == null
    # PAYER_ID5 == POSITION_SUBJECT.ID
    # APPLICATION_DATE5 == null
    # INSERTED_TIMESTAMP5 != null
    # UPDATED_TIMESTAMP5 != null
    # FK_PAYMENT_PLAN5 != null
    # RPT_ID5 == null
    # PAYMENT_TYPE5 == 'MOD3'
    # CARRELLO_ID5 == null
    # ORIGINAL_PAYMENT_TOKEN5 == null
    # FLAG_IO5 == 'Y'
    # RICEVUTA_PM5 == 'Y'
    # FLAG_PAYPAL == 'N'
    # TRANSACTION_ID_pp == $closePayment-v1.transactionId
     
       
    # POSITION_ACTIVATE
    # payTok == $activateIOPaymentResponse.paymentToken
    # psp12 == $closePayment-v1.identificativoPsp
     
     
     # sendPaymentOutcomeReq phase
     Scenario: Execute sendPaymentOutcome request
     Given the closePayment-v1 scenario executed successfully
     Given initial XML sendPaymentOutcome
     """
     <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:nod="http://pagopa-api.pagopa.gov.it/node/nodeForPsp.xsd">
       <soapenv:Header/>
       <soapenv:Body>
          <nod:sendPaymentOutcomeReq>
             <idPSP>70000000001</idPSP>
             <idBrokerPSP>70000000001</idBrokerPSP>
             <idChannel>70000000001_03</idChannel>
             <password>pwdpwdpwd</password>
             <paymentToken>$activateIOPaymentResponse.paymentToken</paymentToken>
             <outcome>OK</outcome>
             <!--Optional:-->
             <details>
                <paymentMethod>creditCard</paymentMethod>
                <!--Optional:-->
                <paymentChannel>app</paymentChannel>
                <fee>2.00</fee>
                <!--Optional:-->
                <payer>
                   <uniqueIdentifier>
                      <entityUniqueIdentifierType>G</entityUniqueIdentifierType>
                      <entityUniqueIdentifierValue>77777777777_01</entityUniqueIdentifierValue>
                   </uniqueIdentifier>
                   <fullName>SPOname_$activateIOPaymentResponse.paymentToken</fullName>
                   <!--Optional:-->
                   <streetName>SPOstreet</streetName>
                   <!--Optional:-->
                   <civicNumber>SPOcivic</civicNumber>
                   <!--Optional:-->
                   <postalCode>SPOpostal</postalCode>
                   <!--Optional:-->
                   <city>SPOcity</city>
                   <!--Optional:-->
                   <stateProvinceRegion>SPOstate</stateProvinceRegion>
                   <!--Optional:-->
                   <country>IT</country>
                   <!--Optional:-->
                   <e-mail>SPOprova@test.it</e-mail>
                </payer>
                <applicationDate>2021-12-12</applicationDate>
                <transferDate>2021-12-11</transferDate>
             </details>
          </nod:sendPaymentOutcomeReq>
       </soapenv:Body>
    </soapenv:Envelope>
    """
    When psp sends sendPaymentOutcome to nodo-dei-pagamenti
    Then check outcome is OK
    
    #DB check_02
    #SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT_STATUS s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#' order by s.ID asc;
    #SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT_STATUS_SNAPSHOT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_STATUS s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#' order by s.ID asc;
    #SELECT s.* FROM NODO_ONLINE.POSITION_STATUS_SNAPSHOT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_SERVICE s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_SUBJECT s where s.FULL_NAME = 'IOname_#idempotency_key#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_SUBJECT s where s.FULL_NAME = 'SPOname_$activateIOPaymentResponse.paymentToken';
    #SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.PSP s where s.ID_PSP = '$sendPaymentOutcomeReq.idPSP';
    #SELECT * FROM NODO_ONLINE.POSITION_ACTIVATE s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    
    #check
    
    #POSITION_PAYMENT_STATUS
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS == 'PAYING'
    # INSERTED_TIMESTAMP != null
    # CREDITOR_REFERENCE_ID == iuv
    # PAYMENT_TOKEN == $activateIOPaymentResponse.paymentToken

    # STATUS1 == 'PAYMENT_RESERVED'
    # STATUS2 == 'PAYMENT_SENT'
    # STATUS3 == 'PAYMENT_ACCEPTED'
    # STATUS4 == 'PAID'
    
    #POSITION_PAYMENT_STATUS_SNAPSHOT
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # CREDITOR_REFERENCE_ID == iuv
    # PAYMENT_TOKEN == $activateIOPaymentResponse.paymentToken
    # STATUS == 'NOTIFIED'
    # INSERTED_TIMESTAMP != null
    # UPDATED_TIMESTAMP != null
    # FK_POSITION_PAYMENT == POSITION_PAYMENT.id

    # ID1 == null
    
    #POSITION_STATUS
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS == 'PAYING'
    # INSERTED_TIMESTAMP != null

    # STATUS1 == 'PAID'
    
    #POSITION_STATUS_SNAPSHOT
    # ID != null
    # PA_FISCAL_CODE == '#creditor_institution_code#'
    # NOTICE_ID == '#notice_number#'
    # STATUS == 'NOTIFIED'
    # INSERTED_TIMESTAMP != null
    # UPDATED_TIMESTAPM != null
    # FK_POSITION_SERVICE == POSITION_SERVICE.id

    # id1 == null
    
    #POSITION_PAYMENT
    # ID5 != null
    # PA_FISCAL_CODE5 == '#creditor_institution_code#'
    # NOTICE_ID5 == '#notice_number#'
    # CREDITOR_REFERENCE_ID5 == iuv
    # PAYMENT_TOKEN5 == $activateIOPaymentResponse.paymentToken
    # BROKER_PA_ID5 == '#creditor_institution_code#'
    # STATION_ID5 == '#stazione#'
    # STATION_VERSION5 == 2
    # PSP_ID5 == '#psp#'
    # BROKER_PSP_ID5 == '#intermediairoPsp#'
    # CHANNEL_ID5 == '#canale#'
    # IDEMPOTENCY_KEY5 == '#idempotency_key#'
    # AMOUNT5 == 10
    # FEE5 == 2
    # OUTCOME5 == 'OK'
    # PAYMENT_METHOD5 == 'TPAY'
    # PAYMENT_CHANNEL5 == 'WISP'
    # TRANSFER_DATE5 == null
    # PAYER_ID5 == POSITION_SUBJECT.ID
    # APPLICATION_DATE5 == null
    # INSERTED_TIMESTAMP5 != null
    # UPDATED_TIMESTAMP5 != null
    # FK_PAYMENT_PLAN5 != null
    # RPT_ID5 == null
    # PAYMENT_TYPE5 == 'MOD3'
    # CARRELLO_ID5 == null
    # ORIGINAL_PAYMENT_TOKEN5 == null
    # FLAG_IO5 == 'Y'
    # RICEVUTA_PM5 == 'Y'
    # FLAG_PAYPAL == 'N'
     
     #POSITION_RECEIPT
    # receiptID == $activateIOPaymentResponse.paymentToken
    # noticeID == '#notice_number#'
    # pa == '#creditor_institution_code#'
    # creditor == iuv
    # token == $activateIOPaymentResponse.paymentToken
    # outcome == POSITION_PAYMENT.outcome
    # amount == POSITION_PAYMENT.amount
    # description == POSITION_SERVICE.description
    # company == POSITION_SERVICE.company_name
    # office == POSITION_SERVICE.office_name
    # debtor == POSITION_SERVICE.debtor_id
    # psp == psp
    # pspCompany == PSP.ragione_sociale
    # pspFiscalCode == PSP.codice_fiscale
    # pspVat == PSP.vat_number
    # channel == POSITION_PAYMENT.channel_id
    # channelDescription == POSITION_PAYMENT.payment_channel
    # payer == POSITION_PAYMENT.payer_id
    # paymentMethod == POSITION_PAYMENT.payment_method
    # fee == POSITION_PAYMENT.fee
    # paymentDateTime != null
    # applicationDate == POSITION_PAYMENT.application_date
    # transferDate != null
    # metadata == POSITION_PAYMENT_PLAN.metadata
    # rtID == null
    # fkPayment == POSITION_PAYMENT.id
    # id == null
     
    #POSITION_ACTIVATE
    # payTok == $activateIOPaymentResponse.paymentToken
    # psp12 == $closePayment-v1.identificativoPsp
     
     
    #DB check - POSITION_RECEIPT_RECIPIENT
    # SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT_RECIPIENT s where s.NOTICE_ID = '#notice_number#' and s.PAYMENT_TOKEN= '$activateIOPaymentResponse.paymentToken';
    # SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    # SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
     
    # check
    #POSITION_RECEIPT_RECIPIENT_PA_INTESTATARIA
    # pa == POSITION_PAYMENT.pa_fiscal_code
    # noticeID == POSITION_PAYMENT.notice_id
    # creditor == POSITION_PAYMENT.creditor_reference_id
    # token == POSITION_PAYMENT.payment_token
    # recipientPA == POSITION_PAYMENT.pa_fiscal_code
    # recipientBroker == POSITION_PAYMENT.broker_pa_id
    # recipientStation == POSITION_PAYMENT.station_id
    # status == 'NOTIFIED'
    # insertedTimestamp != null
    # updatedTimestamp != null
    # fkPositionReceipt == POSITION_RECEIPT.id
     
     #POSITION_RECEIPT_RECIPIENT_PA_SECONDARIE
    # pa2 == null
     
     
    #DB check - POSITION_RECEIPT_RECIPIENT_STATUS
    # SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT_RECIPIENT_STATUS s where s.NOTICE_ID = '#notice_number#' and s.PAYMENT_TOKEN= '$activateIOPaymentResponse.paymentToken' order by s.id asc;
    # SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT_RECIPIENT s where s.NOTICE_ID = '#notice_number#' and s.PAYMENT_TOKEN= '$activateIOPaymentResponse.paymentToken';
     
    # pa == POSITION_RECEIPT_RECIPIENT.pa_fiscal_code
    # noticeID == POSITION_RECEIPT_RECIPIENT.notice_id
    # creditor == POSITION_RECEIPT_RECIPIENT.creditor_reference_id
    # token == POSITION_RECEIPT_RECIPIENT.payment_token
    # recipientPA == POSITION_RECEIPT_RECIPIENT.recipient_pa_fiscal_code
    # recipientBroker == POSITION_RECEIPT_RECIPIENT.recipient_broker_pa_id
    # recipientStation == POSITION_RECEIPT_RECIPIENT.recipient_station_id
    # status == 'NOTICE_GENERATED'
    # fkPositionReceiptRecipient == POSITION_RECEIPT_RECIPIENT.id

    # pa2 == POSITION_RECEIPT_RECIPIENT.pa_fiscal_code
    # noticeID2 == POSITION_RECEIPT_RECIPIENT.notice_id
    # creditor2 == POSITION_RECEIPT_RECIPIENT.creditor_reference_id
    # token2 == POSITION_RECEIPT_RECIPIENT.payment_token
    # recipientPA2 == POSITION_RECEIPT_RECIPIENT.recipient_pa_fiscal_code
    # recipientBroker2 == POSITION_RECEIPT_RECIPIENT.recipient_broker_pa_id
    # recipientStation2 == POSITION_RECEIPT_RECIPIENT.recipient_station_id
    # status2 == 'NOTICE_SENT'
    # fkPositionReceiptRecipient2 == POSITION_RECEIPT_RECIPIENT.id

    # pa3 == POSITION_RECEIPT_RECIPIENT.pa_fiscal_code
    # noticeID3 == POSITION_RECEIPT_RECIPIENT.notice_id
    # creditor3 == POSITION_RECEIPT_RECIPIENT.creditor_reference_id
    # token3 == POSITION_RECEIPT_RECIPIENT.payment_token
    # recipientPA3 == POSITION_RECEIPT_RECIPIENT.recipient_pa_fiscal_code
    # recipientBroker3 == POSITION_RECEIPT_RECIPIENT.recipient_broker_pa_id
    # recipientStation3 == POSITION_RECEIPT_RECIPIENT.recipient_station_id
    # status3 == 'NOTIFIED'
    # fkPositionReceiptRecipient3 == POSITION_RECEIPT_RECIPIENT.id

    # pa4 == null
         
    
    #POSITION_RECEIPT_XML
    #SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT_XML s where s.NOTICE_ID = '#notice_number#' and s.PAYMENT_TOKEN= '$activateIOPaymentResponse.paymentToken';
    #SELECT s.* FROM NODO_ONLINE.POSITION_PAYMENT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    #SELECT s.* FROM NODO_ONLINE.POSITION_RECEIPT_RECIPIENT s where s.NOTICE_ID = '#notice_number#' and s.PA_FISCAL_CODE= '#creditor_institution_code#';
    
    # pa1 == POSITION_PAYMENT.pa_fiscal_code
    # noticeID == POSITION_PAYMENT.notice_id
    # creditor == POSITION_PAYMENT.creditor_reference_id
    # token == POSITION_PAYMENT.payment_token
    # recipientPA == POSITION_RECEIPT_RECIPIENT.recipient_pa_fiscal_code
    # recipientBroker == POSITION_RECEIPT_RECIPIENT.recipient_broker_pa_id
    # recipientStation == POSITION_RECEIPT_RECIPIENT.recipient_station_id
    # insertedTimestamp != null
    # xml != null
    # fkPositionReceipt == POSITION_RECEIPT.id
    # riga2 == null
     
    #RECEIPT_XML content
    # select blob
    #java.sql.Blob blob = sql.firstRow("SELECT XML as blob FROM POSITION_RECEIPT_XML WHERE PAYMENT_TOKEN ='${paymentToken}' and PA_FISCAL_CODE='${pa}' and NOTICE_ID='${noticeNumber}'").blob
    #byte[] bdata = blob.getBytes(1, (int) blob.length());
    #String xmlRt = new String(bdata);
    
    #assert xmlRt.contains('<idPA>'+POSITION_PAYMENT.pa_fiscal_code)
    #assert xmlRt.contains('<idBrokerPA>'+POSITION_PAYMENT.broker_pa_id)
    #assert xmlRt.contains('<idStation>'+POSITION_PAYMENT.station_id)
    #assert xmlRt.contains('<receiptId>'+POSITION_PAYMENT.payment_token)
    #assert xmlRt.contains('<noticeNumber>'+POSITION_PAYMENT.notice_id)
    #assert xmlRt.contains('<fiscalCode>'+POSITION_PAYMENT.pa_fiscal_code)
    #assert xmlRt.contains('<outcome>'+POSITION_PAYMENT.outcome)
    #assert xmlRt.contains('<creditorReferenceId>'+POSITION_PAYMENT.creditor_reference_id)
    #assert xmlRt.contains('<paymentAmount>'+POSITION_PAYMENT.amount)
    #assert xmlRt.contains('<description>'+POSITION_SERVICE.description)
    #assert xmlRt.contains('<companyName>'+POSITION_SERVICE.company_name)
    #assert xmlRt.contains('<debtor><uniqueIdentifier><entityUniqueIdentifierType>'+POSITION_SUBJECT.entity_unique_identifier_type)
    #assert xmlRt.contains('<entityUniqueIdentifierValue>'+POSITION_SUBJECT.entity_unique_identifier_value)
    #assert xmlRt.contains('<fullName>'+POSITION_SUBJECT.full_name)
    #assert xmlRt.contains('<streetName>'+POSITION_SUBJECT.street_name)
    #assert xmlRt.contains('<civicNumber>'+POSITION_SUBJECT.civic_number)
    #assert xmlRt.contains('<postalCode>'+POSITION_SUBJECT.postal_code)
    #assert xmlRt.contains('<city>'+POSITION_SUBJECT.city)
    #assert xmlRt.contains('<stateProvinceRegion>'+POSITION_SUBJECT.state_province_region)
    #assert xmlRt.contains('<country>'+POSITION_SUBJECT.country)
    #assert xmlRt.contains('<e-mail>'+POSITION_SUBJECT.email)

    #assert xmlRt.contains('<transfer><idTransfer>'+POSITION_TRANSFER.transfer_identifier)
    #assert xmlRt.contains('<transferAmount>'+POSITION_TRANSFER.amount)
    #assert xmlRt.contains('<fiscalCodePA>'+POSITION_TRANSFER.pa_fiscal_code_secondary)
    #assert xmlRt.contains('<IBAN>'+POSITION_TRANSFER.iban)
    #assert xmlRt.contains('<remittanceInformation>'+POSITION_TRANSFER.remittance_information)
    #assert xmlRt.contains('<transferCategory>'+POSITION_TRANSFER.transfer_category)

    #assert xmlRt.contains('<idPSP>'+PSP.id_psp)
    #assert xmlRt.contains('<pspFiscalCode>'+PSP.codice_fiscale)
    #assert xmlRt.contains('<PSPCompanyName>'+PSP.ragione_sociale)
    #assert xmlRt.contains('<idChannel>'+POSITION_PAYMENT.channel_id)
    #if(POSITION_PAYMENT.payment_channel==null){
    #    assert xmlRt.contains('<channelDescription>NA')
    #} else{
    #    assert xmlRt.contains('<channelDescription>'+POSITION_PAYMENT.payment_channel)
    #}

    #if(xmlRt.contains('<officeName>')) { 
    #   assert xmlRt.contains('<officeName>'+POSITION_SERVICE.office_name)
    #}

    #if(xmlRt.contains('<payer>')) {      
    #  assert xmlRt.contains('<payer><uniqueIdentifier><entityUniqueIdentifierType>'+POSITION_SUBJECT.entity_unique_identifier_type)
    #  assert xmlRt.contains('<entityUniqueIdentifierValue>'+POSITION_SUBJECT.entity_unique_identifier_value)
    #  assert xmlRt.contains('<fullName>'+POSITION_SUBJECT.full_name)
    #  assert xmlRt.contains('<streetName>'+POSITION_SUBJECT.street_name)
    #  assert xmlRt.contains('<civicNumber>'+POSITION_SUBJECT.civic_number)
    #  assert xmlRt.contains('<postalCode>'+POSITION_SUBJECT.postal_code)
    #  assert xmlRt.contains('<city>'+POSITION_SUBJECT.city)
    #  assert xmlRt.contains('<stateProvinceRegion>'+POSITION_SUBJECT.state_province_region)
    #  assert xmlRt.contains('<country>'+POSITION_SUBJECT.country)
    #  assert xmlRt.contains('<e-mail>'+POSITION_SUBJECT.email)
    #}


    #if(xmlRt.contains('<paymentMethod>')) { 
    #   assert xmlRt.contains('<paymentMethod>'+POSITION_PAYMENT.payment_method)
    #}

    #if(xmlRt.contains('<fee>')) { 
    #   assert xmlRt.contains('<fee>'+POSITION_PAYMENT.fee)
    #}

    #if(xmlRt.contains('<paymentDateTime>')) { 
    #   def insertedTimestamp = POSITION_PAYMENT.inserted_timestamp
    #   def insTimestampString = insertedTimestamp.toString()
    #   assert xmlRt.contains('<paymentDateTime>'+insTimestampString[0..9]+'T'+insTimestampString[11..18])
    #}

    #if(xmlRt.contains('<applicationDate>')) { 
    #   def applicationDate = POSITION_PAYMENT.application_date[0]
    #   def appDateString = applicationDate.toString()
    #   assert xmlRt.contains('<applicationDate>'+appDateString[0..9])
    #}

    #if(xmlRt.contains('<transferDate>')) { 
    #   def transferDate = POSITION_PAYMENT.transfer_date[0]
    #   def traDateString = transferDate.toString()
    #   assert xmlRt.contains('<transferDate>'+traDateString[0..9])
    #}